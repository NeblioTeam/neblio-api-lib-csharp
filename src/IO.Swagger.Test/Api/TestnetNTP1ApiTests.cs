/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TestnetNTP1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TestnetNTP1ApiTests
    {
        private TestnetNTP1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TestnetNTP1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TestnetNTP1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TestnetNTP1Api
            //Assert.IsInstanceOfType(typeof(TestnetNTP1Api), instance, "instance is a TestnetNTP1Api");
        }

        
        /// <summary>
        /// Test TestnetBroadcastTx
        /// </summary>
        [Test]
        public void TestnetBroadcastTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BroadcastTxRequest body = null;
            //var response = instance.TestnetBroadcastTx(body);
            //Assert.IsInstanceOf<BroadcastTxResponse> (response, "response is BroadcastTxResponse");
        }
        
        /// <summary>
        /// Test TestnetBurnToken
        /// </summary>
        [Test]
        public void TestnetBurnTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BurnTokenRequest body = null;
            //var response = instance.TestnetBurnToken(body);
            //Assert.IsInstanceOf<BurnTokenResponse> (response, "response is BurnTokenResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressInfo
        /// </summary>
        [Test]
        public void TestnetGetAddressInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressInfo(address);
            //Assert.IsInstanceOf<GetAddressInfoResponse> (response, "response is GetAddressInfoResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTokenHolders
        /// </summary>
        [Test]
        public void TestnetGetTokenHoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //var response = instance.TestnetGetTokenHolders(tokenid);
            //Assert.IsInstanceOf<GetTokenHoldersResponse> (response, "response is GetTokenHoldersResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTokenId
        /// </summary>
        [Test]
        public void TestnetGetTokenIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokensymbol = null;
            //var response = instance.TestnetGetTokenId(tokensymbol);
            //Assert.IsInstanceOf<GetTokenIdResponse> (response, "response is GetTokenIdResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTokenMetadataOfIssuance
        /// </summary>
        [Test]
        public void TestnetGetTokenMetadataOfIssuanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //var response = instance.TestnetGetTokenMetadataOfIssuance(tokenid);
            //Assert.IsInstanceOf<GetTokenMetadataResponse> (response, "response is GetTokenMetadataResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTokenMetadataOfUtxo
        /// </summary>
        [Test]
        public void TestnetGetTokenMetadataOfUtxoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //string utxo = null;
            //var response = instance.TestnetGetTokenMetadataOfUtxo(tokenid, utxo);
            //Assert.IsInstanceOf<GetTokenMetadataResponse> (response, "response is GetTokenMetadataResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTransactionInfo
        /// </summary>
        [Test]
        public void TestnetGetTransactionInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.TestnetGetTransactionInfo(txid);
            //Assert.IsInstanceOf<GetTransactionInfoResponse> (response, "response is GetTransactionInfoResponse");
        }
        
        /// <summary>
        /// Test TestnetIssueToken
        /// </summary>
        [Test]
        public void TestnetIssueTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IssueTokenRequest body = null;
            //var response = instance.TestnetIssueToken(body);
            //Assert.IsInstanceOf<IssueTokenResponse> (response, "response is IssueTokenResponse");
        }
        
        /// <summary>
        /// Test TestnetSendToken
        /// </summary>
        [Test]
        public void TestnetSendTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendTokenRequest body = null;
            //var response = instance.TestnetSendToken(body);
            //Assert.IsInstanceOf<SendTokenResponse> (response, "response is SendTokenResponse");
        }
        
    }

}
