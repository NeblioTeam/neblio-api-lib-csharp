/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TestnetInsightApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TestnetInsightApiTests
    {
        private TestnetInsightApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TestnetInsightApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TestnetInsightApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TestnetInsightApi
            //Assert.IsInstanceOfType(typeof(TestnetInsightApi), instance, "instance is a TestnetInsightApi");
        }

        
        /// <summary>
        /// Test TestnetGetAddress
        /// </summary>
        [Test]
        public void TestnetGetAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddress(address);
            //Assert.IsInstanceOf<GetAddressResponse> (response, "response is GetAddressResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressBalance
        /// </summary>
        [Test]
        public void TestnetGetAddressBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressBalance(address);
            //Assert.IsInstanceOf<GetAddressBalanceResponse> (response, "response is GetAddressBalanceResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressTotalReceived
        /// </summary>
        [Test]
        public void TestnetGetAddressTotalReceivedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressTotalReceived(address);
            //Assert.IsInstanceOf<GetAddressTotalReceivedResponse> (response, "response is GetAddressTotalReceivedResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressTotalSent
        /// </summary>
        [Test]
        public void TestnetGetAddressTotalSentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressTotalSent(address);
            //Assert.IsInstanceOf<GetAddressTotalSentResponse> (response, "response is GetAddressTotalSentResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressUnconfirmedBalance
        /// </summary>
        [Test]
        public void TestnetGetAddressUnconfirmedBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressUnconfirmedBalance(address);
            //Assert.IsInstanceOf<GetAddressUnconfirmedBalanceResponse> (response, "response is GetAddressUnconfirmedBalanceResponse");
        }
        
        /// <summary>
        /// Test TestnetGetAddressUtxos
        /// </summary>
        [Test]
        public void TestnetGetAddressUtxosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.TestnetGetAddressUtxos(address);
            //Assert.IsInstanceOf<GetAddressUtxosResponse> (response, "response is GetAddressUtxosResponse");
        }
        
        /// <summary>
        /// Test TestnetGetBlock
        /// </summary>
        [Test]
        public void TestnetGetBlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string blockhash = null;
            //var response = instance.TestnetGetBlock(blockhash);
            //Assert.IsInstanceOf<GetBlockResponse> (response, "response is GetBlockResponse");
        }
        
        /// <summary>
        /// Test TestnetGetBlockIndex
        /// </summary>
        [Test]
        public void TestnetGetBlockIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? blockindex = null;
            //var response = instance.TestnetGetBlockIndex(blockindex);
            //Assert.IsInstanceOf<GetBlockIndexResponse> (response, "response is GetBlockIndexResponse");
        }
        
        /// <summary>
        /// Test TestnetGetRawTx
        /// </summary>
        [Test]
        public void TestnetGetRawTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.TestnetGetRawTx(txid);
            //Assert.IsInstanceOf<GetRawTxResponse> (response, "response is GetRawTxResponse");
        }
        
        /// <summary>
        /// Test TestnetGetStatus
        /// </summary>
        [Test]
        public void TestnetGetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.TestnetGetStatus(q);
            //Assert.IsInstanceOf<GetStatusResponse> (response, "response is GetStatusResponse");
        }
        
        /// <summary>
        /// Test TestnetGetSync
        /// </summary>
        [Test]
        public void TestnetGetSyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestnetGetSync();
            //Assert.IsInstanceOf<GetSyncResponse> (response, "response is GetSyncResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTx
        /// </summary>
        [Test]
        public void TestnetGetTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.TestnetGetTx(txid);
            //Assert.IsInstanceOf<GetTxResponse> (response, "response is GetTxResponse");
        }
        
        /// <summary>
        /// Test TestnetGetTxs
        /// </summary>
        [Test]
        public void TestnetGetTxsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string block = null;
            //decimal? page = null;
            //var response = instance.TestnetGetTxs(address, block, page);
            //Assert.IsInstanceOf<GetTxsResponse> (response, "response is GetTxsResponse");
        }
        
        /// <summary>
        /// Test TestnetSendTx
        /// </summary>
        [Test]
        public void TestnetSendTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendTxRequest body = null;
            //var response = instance.TestnetSendTx(body);
            //Assert.IsInstanceOf<BroadcastTxResponse> (response, "response is BroadcastTxResponse");
        }
        
    }

}
