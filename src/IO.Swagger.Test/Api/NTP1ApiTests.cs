/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing NTP1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NTP1ApiTests
    {
        private NTP1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NTP1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NTP1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NTP1Api
            //Assert.IsInstanceOfType(typeof(NTP1Api), instance, "instance is a NTP1Api");
        }

        
        /// <summary>
        /// Test BroadcastTx
        /// </summary>
        [Test]
        public void BroadcastTxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BroadcastTxRequest body = null;
            //var response = instance.BroadcastTx(body);
            //Assert.IsInstanceOf<BroadcastTxResponse> (response, "response is BroadcastTxResponse");
        }
        
        /// <summary>
        /// Test BurnToken
        /// </summary>
        [Test]
        public void BurnTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BurnTokenRequest body = null;
            //var response = instance.BurnToken(body);
            //Assert.IsInstanceOf<BurnTokenResponse> (response, "response is BurnTokenResponse");
        }
        
        /// <summary>
        /// Test GetAddressInfo
        /// </summary>
        [Test]
        public void GetAddressInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.GetAddressInfo(address);
            //Assert.IsInstanceOf<GetAddressInfoResponse> (response, "response is GetAddressInfoResponse");
        }
        
        /// <summary>
        /// Test GetTokenHolders
        /// </summary>
        [Test]
        public void GetTokenHoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //var response = instance.GetTokenHolders(tokenid);
            //Assert.IsInstanceOf<GetTokenHoldersResponse> (response, "response is GetTokenHoldersResponse");
        }
        
        /// <summary>
        /// Test GetTokenId
        /// </summary>
        [Test]
        public void GetTokenIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokensymbol = null;
            //var response = instance.GetTokenId(tokensymbol);
            //Assert.IsInstanceOf<GetTokenIdResponse> (response, "response is GetTokenIdResponse");
        }
        
        /// <summary>
        /// Test GetTokenMetadataOfIssuance
        /// </summary>
        [Test]
        public void GetTokenMetadataOfIssuanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //var response = instance.GetTokenMetadataOfIssuance(tokenid);
            //Assert.IsInstanceOf<GetTokenMetadataResponse> (response, "response is GetTokenMetadataResponse");
        }
        
        /// <summary>
        /// Test GetTokenMetadataOfUtxo
        /// </summary>
        [Test]
        public void GetTokenMetadataOfUtxoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenid = null;
            //string utxo = null;
            //var response = instance.GetTokenMetadataOfUtxo(tokenid, utxo);
            //Assert.IsInstanceOf<GetTokenMetadataResponse> (response, "response is GetTokenMetadataResponse");
        }
        
        /// <summary>
        /// Test GetTransactionInfo
        /// </summary>
        [Test]
        public void GetTransactionInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.GetTransactionInfo(txid);
            //Assert.IsInstanceOf<GetTransactionInfoResponse> (response, "response is GetTransactionInfoResponse");
        }
        
        /// <summary>
        /// Test IssueToken
        /// </summary>
        [Test]
        public void IssueTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IssueTokenRequest body = null;
            //var response = instance.IssueToken(body);
            //Assert.IsInstanceOf<IssueTokenResponse> (response, "response is IssueTokenResponse");
        }
        
        /// <summary>
        /// Test SendToken
        /// </summary>
        [Test]
        public void SendTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendTokenRequest body = null;
            //var response = instance.SendToken(body);
            //Assert.IsInstanceOf<SendTokenResponse> (response, "response is SendTokenResponse");
        }
        
    }

}
