/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Neblio.API.Client;
using Neblio.API.Model;

namespace Neblio.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INTP1Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Broadcasts a signed raw transaction to the network
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>BroadcastTxResponse</returns>
        BroadcastTxResponse BroadcastTx (BroadcastTxRequest broadcastTxRequest);

        /// <summary>
        /// Broadcasts a signed raw transaction to the network
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>ApiResponse of BroadcastTxResponse</returns>
        ApiResponse<BroadcastTxResponse> BroadcastTxWithHttpInfo (BroadcastTxRequest broadcastTxRequest);
        /// <summary>
        /// Builds a transaction that burns an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>BurnTokenResponse</returns>
        BurnTokenResponse BurnToken (BurnTokenRequest burnTokenRequest);

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>ApiResponse of BurnTokenResponse</returns>
        ApiResponse<BurnTokenResponse> BurnTokenWithHttpInfo (BurnTokenRequest burnTokenRequest);
        /// <summary>
        /// Information On a Neblio Address
        /// </summary>
        /// <remarks>
        /// Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>GetAddressInfoResponse</returns>
        GetAddressInfoResponse GetAddressInfo (string address);

        /// <summary>
        /// Information On a Neblio Address
        /// </summary>
        /// <remarks>
        /// Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>ApiResponse of GetAddressInfoResponse</returns>
        ApiResponse<GetAddressInfoResponse> GetAddressInfoWithHttpInfo (string address);
        /// <summary>
        /// Get Addresses Holding a Token
        /// </summary>
        /// <remarks>
        /// Returns the the the addresses holding a token and how many tokens are held 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>GetTokenHoldersResponse</returns>
        GetTokenHoldersResponse GetTokenHolders (string tokenid);

        /// <summary>
        /// Get Addresses Holding a Token
        /// </summary>
        /// <remarks>
        /// Returns the the the addresses holding a token and how many tokens are held 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>ApiResponse of GetTokenHoldersResponse</returns>
        ApiResponse<GetTokenHoldersResponse> GetTokenHoldersWithHttpInfo (string tokenid);
        /// <summary>
        /// Returns the tokenId representing a token
        /// </summary>
        /// <remarks>
        /// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>GetTokenIdResponse</returns>
        GetTokenIdResponse GetTokenId (string tokensymbol);

        /// <summary>
        /// Returns the tokenId representing a token
        /// </summary>
        /// <remarks>
        /// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>ApiResponse of GetTokenIdResponse</returns>
        ApiResponse<GetTokenIdResponse> GetTokenIdWithHttpInfo (string tokensymbol);
        /// <summary>
        /// Get Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>GetTokenMetadataResponse</returns>
        GetTokenMetadataResponse GetTokenMetadata (string tokenid);

        /// <summary>
        /// Get Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>ApiResponse of GetTokenMetadataResponse</returns>
        ApiResponse<GetTokenMetadataResponse> GetTokenMetadataWithHttpInfo (string tokenid);
        /// <summary>
        /// Get UTXO Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>GetTokenMetadataResponse</returns>
        GetTokenMetadataResponse GetTokenMetadataOfUtxo (string tokenid, string utxo);

        /// <summary>
        /// Get UTXO Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>ApiResponse of GetTokenMetadataResponse</returns>
        ApiResponse<GetTokenMetadataResponse> GetTokenMetadataOfUtxoWithHttpInfo (string tokenid, string utxo);
        /// <summary>
        /// Information On an NTP1 Transaction
        /// </summary>
        /// <remarks>
        /// Returns detailed information regarding an NTP1 transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>GetTransactionInfoResponse</returns>
        GetTransactionInfoResponse GetTransactionInfo (string txid);

        /// <summary>
        /// Information On an NTP1 Transaction
        /// </summary>
        /// <remarks>
        /// Returns detailed information regarding an NTP1 transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>ApiResponse of GetTransactionInfoResponse</returns>
        ApiResponse<GetTransactionInfoResponse> GetTransactionInfoWithHttpInfo (string txid);
        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>IssueTokenResponse</returns>
        IssueTokenResponse IssueToken (IssueTokenRequest issueTokenRequest);

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>ApiResponse of IssueTokenResponse</returns>
        ApiResponse<IssueTokenResponse> IssueTokenWithHttpInfo (IssueTokenRequest issueTokenRequest);
        /// <summary>
        /// Builds a transaction that sends an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>SendTokenResponse</returns>
        SendTokenResponse SendToken (SendTokenRequest sendTokenRequest);

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>ApiResponse of SendTokenResponse</returns>
        ApiResponse<SendTokenResponse> SendTokenWithHttpInfo (SendTokenRequest sendTokenRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Broadcasts a signed raw transaction to the network
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of BroadcastTxResponse</returns>
        System.Threading.Tasks.Task<BroadcastTxResponse> BroadcastTxAsync (BroadcastTxRequest broadcastTxRequest);

        /// <summary>
        /// Broadcasts a signed raw transaction to the network
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of ApiResponse (BroadcastTxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadcastTxResponse>> BroadcastTxAsyncWithHttpInfo (BroadcastTxRequest broadcastTxRequest);
        /// <summary>
        /// Builds a transaction that burns an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>Task of BurnTokenResponse</returns>
        System.Threading.Tasks.Task<BurnTokenResponse> BurnTokenAsync (BurnTokenRequest burnTokenRequest);

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>Task of ApiResponse (BurnTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BurnTokenResponse>> BurnTokenAsyncWithHttpInfo (BurnTokenRequest burnTokenRequest);
        /// <summary>
        /// Information On a Neblio Address
        /// </summary>
        /// <remarks>
        /// Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>Task of GetAddressInfoResponse</returns>
        System.Threading.Tasks.Task<GetAddressInfoResponse> GetAddressInfoAsync (string address);

        /// <summary>
        /// Information On a Neblio Address
        /// </summary>
        /// <remarks>
        /// Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>Task of ApiResponse (GetAddressInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAddressInfoResponse>> GetAddressInfoAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get Addresses Holding a Token
        /// </summary>
        /// <remarks>
        /// Returns the the the addresses holding a token and how many tokens are held 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of GetTokenHoldersResponse</returns>
        System.Threading.Tasks.Task<GetTokenHoldersResponse> GetTokenHoldersAsync (string tokenid);

        /// <summary>
        /// Get Addresses Holding a Token
        /// </summary>
        /// <remarks>
        /// Returns the the the addresses holding a token and how many tokens are held 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenHoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenHoldersResponse>> GetTokenHoldersAsyncWithHttpInfo (string tokenid);
        /// <summary>
        /// Returns the tokenId representing a token
        /// </summary>
        /// <remarks>
        /// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>Task of GetTokenIdResponse</returns>
        System.Threading.Tasks.Task<GetTokenIdResponse> GetTokenIdAsync (string tokensymbol);

        /// <summary>
        /// Returns the tokenId representing a token
        /// </summary>
        /// <remarks>
        /// Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>Task of ApiResponse (GetTokenIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenIdResponse>> GetTokenIdAsyncWithHttpInfo (string tokensymbol);
        /// <summary>
        /// Get Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of GetTokenMetadataResponse</returns>
        System.Threading.Tasks.Task<GetTokenMetadataResponse> GetTokenMetadataAsync (string tokenid);

        /// <summary>
        /// Get Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenMetadataResponse>> GetTokenMetadataAsyncWithHttpInfo (string tokenid);
        /// <summary>
        /// Get UTXO Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>Task of GetTokenMetadataResponse</returns>
        System.Threading.Tasks.Task<GetTokenMetadataResponse> GetTokenMetadataOfUtxoAsync (string tokenid, string utxo);

        /// <summary>
        /// Get UTXO Metadata of Token
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenMetadataResponse>> GetTokenMetadataOfUtxoAsyncWithHttpInfo (string tokenid, string utxo);
        /// <summary>
        /// Information On an NTP1 Transaction
        /// </summary>
        /// <remarks>
        /// Returns detailed information regarding an NTP1 transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>Task of GetTransactionInfoResponse</returns>
        System.Threading.Tasks.Task<GetTransactionInfoResponse> GetTransactionInfoAsync (string txid);

        /// <summary>
        /// Information On an NTP1 Transaction
        /// </summary>
        /// <remarks>
        /// Returns detailed information regarding an NTP1 transaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>Task of ApiResponse (GetTransactionInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransactionInfoResponse>> GetTransactionInfoAsyncWithHttpInfo (string txid);
        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>Task of IssueTokenResponse</returns>
        System.Threading.Tasks.Task<IssueTokenResponse> IssueTokenAsync (IssueTokenRequest issueTokenRequest);

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>Task of ApiResponse (IssueTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssueTokenResponse>> IssueTokenAsyncWithHttpInfo (IssueTokenRequest issueTokenRequest);
        /// <summary>
        /// Builds a transaction that sends an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>Task of SendTokenResponse</returns>
        System.Threading.Tasks.Task<SendTokenResponse> SendTokenAsync (SendTokenRequest sendTokenRequest);

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token
        /// </summary>
        /// <remarks>
        /// Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>Task of ApiResponse (SendTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendTokenResponse>> SendTokenAsyncWithHttpInfo (SendTokenRequest sendTokenRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NTP1Api : INTP1Api
    {
        private Neblio.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NTP1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public NTP1Api(String basePath)
        {
            this.Configuration = new Neblio.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NTP1Api"/> class
        /// </summary>
        /// <returns></returns>
        public NTP1Api()
        {
            this.Configuration = Neblio.API.Client.Configuration.Default;

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NTP1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NTP1Api(Neblio.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Neblio.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Neblio.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Neblio.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>BroadcastTxResponse</returns>
        public BroadcastTxResponse BroadcastTx (BroadcastTxRequest broadcastTxRequest)
        {
             ApiResponse<BroadcastTxResponse> localVarResponse = BroadcastTxWithHttpInfo(broadcastTxRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>ApiResponse of BroadcastTxResponse</returns>
        public ApiResponse< BroadcastTxResponse > BroadcastTxWithHttpInfo (BroadcastTxRequest broadcastTxRequest)
        {
            // verify the required parameter 'broadcastTxRequest' is set
            if (broadcastTxRequest == null)
                throw new ApiException(400, "Missing required parameter 'broadcastTxRequest' when calling NTP1Api->BroadcastTx");

            var localVarPath = "/ntp1/broadcast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (broadcastTxRequest != null && broadcastTxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(broadcastTxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = broadcastTxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BroadcastTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastTxResponse)));
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of BroadcastTxResponse</returns>
        public async System.Threading.Tasks.Task<BroadcastTxResponse> BroadcastTxAsync (BroadcastTxRequest broadcastTxRequest)
        {
             ApiResponse<BroadcastTxResponse> localVarResponse = await BroadcastTxAsyncWithHttpInfo(broadcastTxRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of ApiResponse (BroadcastTxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BroadcastTxResponse>> BroadcastTxAsyncWithHttpInfo (BroadcastTxRequest broadcastTxRequest)
        {
            // verify the required parameter 'broadcastTxRequest' is set
            if (broadcastTxRequest == null)
                throw new ApiException(400, "Missing required parameter 'broadcastTxRequest' when calling NTP1Api->BroadcastTx");

            var localVarPath = "/ntp1/broadcast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (broadcastTxRequest != null && broadcastTxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(broadcastTxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = broadcastTxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BroadcastTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastTxResponse)));
        }

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>BurnTokenResponse</returns>
        public BurnTokenResponse BurnToken (BurnTokenRequest burnTokenRequest)
        {
             ApiResponse<BurnTokenResponse> localVarResponse = BurnTokenWithHttpInfo(burnTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>ApiResponse of BurnTokenResponse</returns>
        public ApiResponse< BurnTokenResponse > BurnTokenWithHttpInfo (BurnTokenRequest burnTokenRequest)
        {
            // verify the required parameter 'burnTokenRequest' is set
            if (burnTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnTokenRequest' when calling NTP1Api->BurnToken");

            var localVarPath = "/ntp1/burntoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burnTokenRequest != null && burnTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BurnTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BurnTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BurnTokenResponse)));
        }

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>Task of BurnTokenResponse</returns>
        public async System.Threading.Tasks.Task<BurnTokenResponse> BurnTokenAsync (BurnTokenRequest burnTokenRequest)
        {
             ApiResponse<BurnTokenResponse> localVarResponse = await BurnTokenAsyncWithHttpInfo(burnTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Builds a transaction that burns an NTP1 Token Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burnTokenRequest">Object representing the token to be burned</param>
        /// <returns>Task of ApiResponse (BurnTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BurnTokenResponse>> BurnTokenAsyncWithHttpInfo (BurnTokenRequest burnTokenRequest)
        {
            // verify the required parameter 'burnTokenRequest' is set
            if (burnTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnTokenRequest' when calling NTP1Api->BurnToken");

            var localVarPath = "/ntp1/burntoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burnTokenRequest != null && burnTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BurnTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BurnTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BurnTokenResponse)));
        }

        /// <summary>
        /// Information On a Neblio Address Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>GetAddressInfoResponse</returns>
        public GetAddressInfoResponse GetAddressInfo (string address)
        {
             ApiResponse<GetAddressInfoResponse> localVarResponse = GetAddressInfoWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Information On a Neblio Address Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>ApiResponse of GetAddressInfoResponse</returns>
        public ApiResponse< GetAddressInfoResponse > GetAddressInfoWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NTP1Api->GetAddressInfo");

            var localVarPath = "/ntp1/addressinfo/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressInfoResponse)));
        }

        /// <summary>
        /// Information On a Neblio Address Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>Task of GetAddressInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetAddressInfoResponse> GetAddressInfoAsync (string address)
        {
             ApiResponse<GetAddressInfoResponse> localVarResponse = await GetAddressInfoAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Information On a Neblio Address Returns both NEBL and NTP1 token UTXOs held at the given address. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Neblio Address to get information on.</param>
        /// <returns>Task of ApiResponse (GetAddressInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAddressInfoResponse>> GetAddressInfoAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NTP1Api->GetAddressInfo");

            var localVarPath = "/ntp1/addressinfo/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressInfoResponse)));
        }

        /// <summary>
        /// Get Addresses Holding a Token Returns the the the addresses holding a token and how many tokens are held 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>GetTokenHoldersResponse</returns>
        public GetTokenHoldersResponse GetTokenHolders (string tokenid)
        {
             ApiResponse<GetTokenHoldersResponse> localVarResponse = GetTokenHoldersWithHttpInfo(tokenid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Addresses Holding a Token Returns the the the addresses holding a token and how many tokens are held 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>ApiResponse of GetTokenHoldersResponse</returns>
        public ApiResponse< GetTokenHoldersResponse > GetTokenHoldersWithHttpInfo (string tokenid)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenHolders");

            var localVarPath = "/ntp1/stakeholders/{tokenid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenHolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenHoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenHoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenHoldersResponse)));
        }

        /// <summary>
        /// Get Addresses Holding a Token Returns the the the addresses holding a token and how many tokens are held 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of GetTokenHoldersResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenHoldersResponse> GetTokenHoldersAsync (string tokenid)
        {
             ApiResponse<GetTokenHoldersResponse> localVarResponse = await GetTokenHoldersAsyncWithHttpInfo(tokenid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Addresses Holding a Token Returns the the the addresses holding a token and how many tokens are held 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenHoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenHoldersResponse>> GetTokenHoldersAsyncWithHttpInfo (string tokenid)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenHolders");

            var localVarPath = "/ntp1/stakeholders/{tokenid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenHolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenHoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenHoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenHoldersResponse)));
        }

        /// <summary>
        /// Returns the tokenId representing a token Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>GetTokenIdResponse</returns>
        public GetTokenIdResponse GetTokenId (string tokensymbol)
        {
             ApiResponse<GetTokenIdResponse> localVarResponse = GetTokenIdWithHttpInfo(tokensymbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tokenId representing a token Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>ApiResponse of GetTokenIdResponse</returns>
        public ApiResponse< GetTokenIdResponse > GetTokenIdWithHttpInfo (string tokensymbol)
        {
            // verify the required parameter 'tokensymbol' is set
            if (tokensymbol == null)
                throw new ApiException(400, "Missing required parameter 'tokensymbol' when calling NTP1Api->GetTokenId");

            var localVarPath = "/ntp1/tokenid/{tokensymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokensymbol != null) localVarPathParams.Add("tokensymbol", this.Configuration.ApiClient.ParameterToString(tokensymbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenIdResponse)));
        }

        /// <summary>
        /// Returns the tokenId representing a token Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>Task of GetTokenIdResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenIdResponse> GetTokenIdAsync (string tokensymbol)
        {
             ApiResponse<GetTokenIdResponse> localVarResponse = await GetTokenIdAsyncWithHttpInfo(tokensymbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the tokenId representing a token Translates a token symbol to a tokenId if a token exists with that symbol on the network 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokensymbol">Token symbol</param>
        /// <returns>Task of ApiResponse (GetTokenIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenIdResponse>> GetTokenIdAsyncWithHttpInfo (string tokensymbol)
        {
            // verify the required parameter 'tokensymbol' is set
            if (tokensymbol == null)
                throw new ApiException(400, "Missing required parameter 'tokensymbol' when calling NTP1Api->GetTokenId");

            var localVarPath = "/ntp1/tokenid/{tokensymbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokensymbol != null) localVarPathParams.Add("tokensymbol", this.Configuration.ApiClient.ParameterToString(tokensymbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenIdResponse)));
        }

        /// <summary>
        /// Get Metadata of Token Returns the metadata associated with a token. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>GetTokenMetadataResponse</returns>
        public GetTokenMetadataResponse GetTokenMetadata (string tokenid)
        {
             ApiResponse<GetTokenMetadataResponse> localVarResponse = GetTokenMetadataWithHttpInfo(tokenid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata of Token Returns the metadata associated with a token. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>ApiResponse of GetTokenMetadataResponse</returns>
        public ApiResponse< GetTokenMetadataResponse > GetTokenMetadataWithHttpInfo (string tokenid)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenMetadata");

            var localVarPath = "/ntp1/tokenmetadata/{tokenid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenMetadataResponse)));
        }

        /// <summary>
        /// Get Metadata of Token Returns the metadata associated with a token. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of GetTokenMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenMetadataResponse> GetTokenMetadataAsync (string tokenid)
        {
             ApiResponse<GetTokenMetadataResponse> localVarResponse = await GetTokenMetadataAsyncWithHttpInfo(tokenid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Metadata of Token Returns the metadata associated with a token. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenMetadataResponse>> GetTokenMetadataAsyncWithHttpInfo (string tokenid)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenMetadata");

            var localVarPath = "/ntp1/tokenmetadata/{tokenid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenMetadataResponse)));
        }

        /// <summary>
        /// Get UTXO Metadata of Token Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>GetTokenMetadataResponse</returns>
        public GetTokenMetadataResponse GetTokenMetadataOfUtxo (string tokenid, string utxo)
        {
             ApiResponse<GetTokenMetadataResponse> localVarResponse = GetTokenMetadataOfUtxoWithHttpInfo(tokenid, utxo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get UTXO Metadata of Token Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>ApiResponse of GetTokenMetadataResponse</returns>
        public ApiResponse< GetTokenMetadataResponse > GetTokenMetadataOfUtxoWithHttpInfo (string tokenid, string utxo)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenMetadataOfUtxo");
            // verify the required parameter 'utxo' is set
            if (utxo == null)
                throw new ApiException(400, "Missing required parameter 'utxo' when calling NTP1Api->GetTokenMetadataOfUtxo");

            var localVarPath = "/ntp1/tokenmetadata/{tokenid}/{utxo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter
            if (utxo != null) localVarPathParams.Add("utxo", this.Configuration.ApiClient.ParameterToString(utxo)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenMetadataOfUtxo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenMetadataResponse)));
        }

        /// <summary>
        /// Get UTXO Metadata of Token Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>Task of GetTokenMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenMetadataResponse> GetTokenMetadataOfUtxoAsync (string tokenid, string utxo)
        {
             ApiResponse<GetTokenMetadataResponse> localVarResponse = await GetTokenMetadataOfUtxoAsyncWithHttpInfo(tokenid, utxo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get UTXO Metadata of Token Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenid">TokenId to request metadata for</param>
        /// <param name="utxo">Specific UTXO to request metadata for</param>
        /// <returns>Task of ApiResponse (GetTokenMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenMetadataResponse>> GetTokenMetadataOfUtxoAsyncWithHttpInfo (string tokenid, string utxo)
        {
            // verify the required parameter 'tokenid' is set
            if (tokenid == null)
                throw new ApiException(400, "Missing required parameter 'tokenid' when calling NTP1Api->GetTokenMetadataOfUtxo");
            // verify the required parameter 'utxo' is set
            if (utxo == null)
                throw new ApiException(400, "Missing required parameter 'utxo' when calling NTP1Api->GetTokenMetadataOfUtxo");

            var localVarPath = "/ntp1/tokenmetadata/{tokenid}/{utxo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenid != null) localVarPathParams.Add("tokenid", this.Configuration.ApiClient.ParameterToString(tokenid)); // path parameter
            if (utxo != null) localVarPathParams.Add("utxo", this.Configuration.ApiClient.ParameterToString(utxo)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTokenMetadataOfUtxo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenMetadataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenMetadataResponse)));
        }

        /// <summary>
        /// Information On an NTP1 Transaction Returns detailed information regarding an NTP1 transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>GetTransactionInfoResponse</returns>
        public GetTransactionInfoResponse GetTransactionInfo (string txid)
        {
             ApiResponse<GetTransactionInfoResponse> localVarResponse = GetTransactionInfoWithHttpInfo(txid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Information On an NTP1 Transaction Returns detailed information regarding an NTP1 transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>ApiResponse of GetTransactionInfoResponse</returns>
        public ApiResponse< GetTransactionInfoResponse > GetTransactionInfoWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling NTP1Api->GetTransactionInfo");

            var localVarPath = "/ntp1/transactioninfo/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionInfoResponse)));
        }

        /// <summary>
        /// Information On an NTP1 Transaction Returns detailed information regarding an NTP1 transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>Task of GetTransactionInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetTransactionInfoResponse> GetTransactionInfoAsync (string txid)
        {
             ApiResponse<GetTransactionInfoResponse> localVarResponse = await GetTransactionInfoAsyncWithHttpInfo(txid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Information On an NTP1 Transaction Returns detailed information regarding an NTP1 transaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Neblio txid to get information on.</param>
        /// <returns>Task of ApiResponse (GetTransactionInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransactionInfoResponse>> GetTransactionInfoAsyncWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling NTP1Api->GetTransactionInfo");

            var localVarPath = "/ntp1/transactioninfo/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransactionInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTransactionInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransactionInfoResponse)));
        }

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>IssueTokenResponse</returns>
        public IssueTokenResponse IssueToken (IssueTokenRequest issueTokenRequest)
        {
             ApiResponse<IssueTokenResponse> localVarResponse = IssueTokenWithHttpInfo(issueTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>ApiResponse of IssueTokenResponse</returns>
        public ApiResponse< IssueTokenResponse > IssueTokenWithHttpInfo (IssueTokenRequest issueTokenRequest)
        {
            // verify the required parameter 'issueTokenRequest' is set
            if (issueTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'issueTokenRequest' when calling NTP1Api->IssueToken");

            var localVarPath = "/ntp1/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issueTokenRequest != null && issueTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(issueTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issueTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssueTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IssueTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssueTokenResponse)));
        }

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>Task of IssueTokenResponse</returns>
        public async System.Threading.Tasks.Task<IssueTokenResponse> IssueTokenAsync (IssueTokenRequest issueTokenRequest)
        {
             ApiResponse<IssueTokenResponse> localVarResponse = await IssueTokenAsyncWithHttpInfo(issueTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Builds a transaction that issues a new NTP1 Token Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest">Object representing the token to be created</param>
        /// <returns>Task of ApiResponse (IssueTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssueTokenResponse>> IssueTokenAsyncWithHttpInfo (IssueTokenRequest issueTokenRequest)
        {
            // verify the required parameter 'issueTokenRequest' is set
            if (issueTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'issueTokenRequest' when calling NTP1Api->IssueToken");

            var localVarPath = "/ntp1/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (issueTokenRequest != null && issueTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(issueTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issueTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssueTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IssueTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssueTokenResponse)));
        }

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>SendTokenResponse</returns>
        public SendTokenResponse SendToken (SendTokenRequest sendTokenRequest)
        {
             ApiResponse<SendTokenResponse> localVarResponse = SendTokenWithHttpInfo(sendTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>ApiResponse of SendTokenResponse</returns>
        public ApiResponse< SendTokenResponse > SendTokenWithHttpInfo (SendTokenRequest sendTokenRequest)
        {
            // verify the required parameter 'sendTokenRequest' is set
            if (sendTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendTokenRequest' when calling NTP1Api->SendToken");

            var localVarPath = "/ntp1/sendtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendTokenRequest != null && sendTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendTokenResponse)));
        }

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>Task of SendTokenResponse</returns>
        public async System.Threading.Tasks.Task<SendTokenResponse> SendTokenAsync (SendTokenRequest sendTokenRequest)
        {
             ApiResponse<SendTokenResponse> localVarResponse = await SendTokenAsyncWithHttpInfo(sendTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Builds a transaction that sends an NTP1 Token Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTokenRequest">Object representing the token to be sent</param>
        /// <returns>Task of ApiResponse (SendTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendTokenResponse>> SendTokenAsyncWithHttpInfo (SendTokenRequest sendTokenRequest)
        {
            // verify the required parameter 'sendTokenRequest' is set
            if (sendTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendTokenRequest' when calling NTP1Api->SendToken");

            var localVarPath = "/ntp1/sendtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendTokenRequest != null && sendTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendTokenResponse)));
        }

    }
}
