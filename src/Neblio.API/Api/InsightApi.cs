/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Neblio.API.Client;
using Neblio.API.Model;

namespace Neblio.API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns address object
        /// </summary>
        /// <remarks>
        /// Returns NEBL address object containing information on a specific address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>GetAddressResponse</returns>
        GetAddressResponse GetAddress (string address);

        /// <summary>
        /// Returns address object
        /// </summary>
        /// <remarks>
        /// Returns NEBL address object containing information on a specific address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of GetAddressResponse</returns>
        ApiResponse<GetAddressResponse> GetAddressWithHttpInfo (string address);
        /// <summary>
        /// Returns address balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        decimal? GetAddressBalance (string address);

        /// <summary>
        /// Returns address balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> GetAddressBalanceWithHttpInfo (string address);
        /// <summary>
        /// Returns total received by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL received by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        decimal? GetAddressTotalReceived (string address);

        /// <summary>
        /// Returns total received by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL received by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> GetAddressTotalReceivedWithHttpInfo (string address);
        /// <summary>
        /// Returns total sent by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL sent by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        decimal? GetAddressTotalSent (string address);

        /// <summary>
        /// Returns total sent by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL sent by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> GetAddressTotalSentWithHttpInfo (string address);
        /// <summary>
        /// Returns address unconfirmed balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address unconfirmed balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        decimal? GetAddressUnconfirmedBalance (string address);

        /// <summary>
        /// Returns address unconfirmed balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address unconfirmed balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> GetAddressUnconfirmedBalanceWithHttpInfo (string address);
        /// <summary>
        /// Returns all UTXOs at a given address
        /// </summary>
        /// <remarks>
        /// Returns information on each Unspent Transaction Output contained at an address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetAddressUtxos (string address);

        /// <summary>
        /// Returns all UTXOs at a given address
        /// </summary>
        /// <remarks>
        /// Returns information on each Unspent Transaction Output contained at an address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetAddressUtxosWithHttpInfo (string address);
        /// <summary>
        /// Returns information regarding a Neblio block
        /// </summary>
        /// <remarks>
        /// Returns blockchain data for a given block based upon the block hash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>GetBlockResponse</returns>
        GetBlockResponse GetBlock (string blockhash);

        /// <summary>
        /// Returns information regarding a Neblio block
        /// </summary>
        /// <remarks>
        /// Returns blockchain data for a given block based upon the block hash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>ApiResponse of GetBlockResponse</returns>
        ApiResponse<GetBlockResponse> GetBlockWithHttpInfo (string blockhash);
        /// <summary>
        /// Returns block hash of block
        /// </summary>
        /// <remarks>
        /// Returns the block hash of a block at a given block index
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>GetBlockIndexResponse</returns>
        GetBlockIndexResponse GetBlockIndex (decimal? blockindex);

        /// <summary>
        /// Returns block hash of block
        /// </summary>
        /// <remarks>
        /// Returns the block hash of a block at a given block index
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>ApiResponse of GetBlockIndexResponse</returns>
        ApiResponse<GetBlockIndexResponse> GetBlockIndexWithHttpInfo (decimal? blockindex);
        /// <summary>
        /// Returns raw transaction hex
        /// </summary>
        /// <remarks>
        /// Returns raw transaction hex representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>GetRawTxResponse</returns>
        GetRawTxResponse GetRawTx (string txid);

        /// <summary>
        /// Returns raw transaction hex
        /// </summary>
        /// <remarks>
        /// Returns raw transaction hex representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>ApiResponse of GetRawTxResponse</returns>
        ApiResponse<GetRawTxResponse> GetRawTxWithHttpInfo (string txid);
        /// <summary>
        /// Utility API for calling several blockchain node functions
        /// </summary>
        /// <remarks>
        /// Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Object</returns>
        Object GetStatus (string q = null);

        /// <summary>
        /// Utility API for calling several blockchain node functions
        /// </summary>
        /// <remarks>
        /// Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetStatusWithHttpInfo (string q = null);
        /// <summary>
        /// Get node sync status
        /// </summary>
        /// <remarks>
        /// Returns information on the node&#39;s sync progress
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSyncResponse</returns>
        GetSyncResponse GetSync ();

        /// <summary>
        /// Get node sync status
        /// </summary>
        /// <remarks>
        /// Returns information on the node&#39;s sync progress
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSyncResponse</returns>
        ApiResponse<GetSyncResponse> GetSyncWithHttpInfo ();
        /// <summary>
        /// Returns transaction object
        /// </summary>
        /// <remarks>
        /// Returns NEBL transaction object representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>GetTxResponse</returns>
        GetTxResponse GetTx (string txid);

        /// <summary>
        /// Returns transaction object
        /// </summary>
        /// <remarks>
        /// Returns NEBL transaction object representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>ApiResponse of GetTxResponse</returns>
        ApiResponse<GetTxResponse> GetTxWithHttpInfo (string txid);
        /// <summary>
        /// Get transactions by block or address
        /// </summary>
        /// <remarks>
        /// Returns all transactions by block or address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>GetTxsResponse</returns>
        GetTxsResponse GetTxs (string address = null, string block = null, decimal? pageNum = null);

        /// <summary>
        /// Get transactions by block or address
        /// </summary>
        /// <remarks>
        /// Returns all transactions by block or address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>ApiResponse of GetTxsResponse</returns>
        ApiResponse<GetTxsResponse> GetTxsWithHttpInfo (string address = null, string block = null, decimal? pageNum = null);
        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific)
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>BroadcastTxResponse</returns>
        BroadcastTxResponse SendTx (SendTxRequest sendTxRequest);

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific)
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>ApiResponse of BroadcastTxResponse</returns>
        ApiResponse<BroadcastTxResponse> SendTxWithHttpInfo (SendTxRequest sendTxRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns address object
        /// </summary>
        /// <remarks>
        /// Returns NEBL address object containing information on a specific address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of GetAddressResponse</returns>
        System.Threading.Tasks.Task<GetAddressResponse> GetAddressAsync (string address);

        /// <summary>
        /// Returns address object
        /// </summary>
        /// <remarks>
        /// Returns NEBL address object containing information on a specific address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (GetAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAddressResponse>> GetAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns address balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> GetAddressBalanceAsync (string address);

        /// <summary>
        /// Returns address balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressBalanceAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns total received by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL received by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> GetAddressTotalReceivedAsync (string address);

        /// <summary>
        /// Returns total received by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL received by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressTotalReceivedAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns total sent by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL sent by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> GetAddressTotalSentAsync (string address);

        /// <summary>
        /// Returns total sent by address in sats
        /// </summary>
        /// <remarks>
        /// Returns total NEBL sent by address in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressTotalSentAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns address unconfirmed balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address unconfirmed balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> GetAddressUnconfirmedBalanceAsync (string address);

        /// <summary>
        /// Returns address unconfirmed balance in sats
        /// </summary>
        /// <remarks>
        /// Returns NEBL address unconfirmed balance in satoshis
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressUnconfirmedBalanceAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns all UTXOs at a given address
        /// </summary>
        /// <remarks>
        /// Returns information on each Unspent Transaction Output contained at an address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetAddressUtxosAsync (string address);

        /// <summary>
        /// Returns all UTXOs at a given address
        /// </summary>
        /// <remarks>
        /// Returns information on each Unspent Transaction Output contained at an address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetAddressUtxosAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns information regarding a Neblio block
        /// </summary>
        /// <remarks>
        /// Returns blockchain data for a given block based upon the block hash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>Task of GetBlockResponse</returns>
        System.Threading.Tasks.Task<GetBlockResponse> GetBlockAsync (string blockhash);

        /// <summary>
        /// Returns information regarding a Neblio block
        /// </summary>
        /// <remarks>
        /// Returns blockchain data for a given block based upon the block hash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>Task of ApiResponse (GetBlockResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBlockResponse>> GetBlockAsyncWithHttpInfo (string blockhash);
        /// <summary>
        /// Returns block hash of block
        /// </summary>
        /// <remarks>
        /// Returns the block hash of a block at a given block index
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>Task of GetBlockIndexResponse</returns>
        System.Threading.Tasks.Task<GetBlockIndexResponse> GetBlockIndexAsync (decimal? blockindex);

        /// <summary>
        /// Returns block hash of block
        /// </summary>
        /// <remarks>
        /// Returns the block hash of a block at a given block index
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>Task of ApiResponse (GetBlockIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBlockIndexResponse>> GetBlockIndexAsyncWithHttpInfo (decimal? blockindex);
        /// <summary>
        /// Returns raw transaction hex
        /// </summary>
        /// <remarks>
        /// Returns raw transaction hex representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of GetRawTxResponse</returns>
        System.Threading.Tasks.Task<GetRawTxResponse> GetRawTxAsync (string txid);

        /// <summary>
        /// Returns raw transaction hex
        /// </summary>
        /// <remarks>
        /// Returns raw transaction hex representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of ApiResponse (GetRawTxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRawTxResponse>> GetRawTxAsyncWithHttpInfo (string txid);
        /// <summary>
        /// Utility API for calling several blockchain node functions
        /// </summary>
        /// <remarks>
        /// Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetStatusAsync (string q = null);

        /// <summary>
        /// Utility API for calling several blockchain node functions
        /// </summary>
        /// <remarks>
        /// Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusAsyncWithHttpInfo (string q = null);
        /// <summary>
        /// Get node sync status
        /// </summary>
        /// <remarks>
        /// Returns information on the node&#39;s sync progress
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSyncResponse</returns>
        System.Threading.Tasks.Task<GetSyncResponse> GetSyncAsync ();

        /// <summary>
        /// Get node sync status
        /// </summary>
        /// <remarks>
        /// Returns information on the node&#39;s sync progress
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSyncResponse>> GetSyncAsyncWithHttpInfo ();
        /// <summary>
        /// Returns transaction object
        /// </summary>
        /// <remarks>
        /// Returns NEBL transaction object representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of GetTxResponse</returns>
        System.Threading.Tasks.Task<GetTxResponse> GetTxAsync (string txid);

        /// <summary>
        /// Returns transaction object
        /// </summary>
        /// <remarks>
        /// Returns NEBL transaction object representing a NEBL transaction
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of ApiResponse (GetTxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTxResponse>> GetTxAsyncWithHttpInfo (string txid);
        /// <summary>
        /// Get transactions by block or address
        /// </summary>
        /// <remarks>
        /// Returns all transactions by block or address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>Task of GetTxsResponse</returns>
        System.Threading.Tasks.Task<GetTxsResponse> GetTxsAsync (string address = null, string block = null, decimal? pageNum = null);

        /// <summary>
        /// Get transactions by block or address
        /// </summary>
        /// <remarks>
        /// Returns all transactions by block or address
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>Task of ApiResponse (GetTxsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTxsResponse>> GetTxsAsyncWithHttpInfo (string address = null, string block = null, decimal? pageNum = null);
        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific)
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of BroadcastTxResponse</returns>
        System.Threading.Tasks.Task<BroadcastTxResponse> SendTxAsync (SendTxRequest sendTxRequest);

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific)
        /// </summary>
        /// <remarks>
        /// Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </remarks>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of ApiResponse (BroadcastTxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BroadcastTxResponse>> SendTxAsyncWithHttpInfo (SendTxRequest sendTxRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InsightApi : IInsightApi
    {
        private Neblio.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InsightApi(String basePath)
        {
            this.Configuration = new Neblio.API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class
        /// </summary>
        /// <returns></returns>
        public InsightApi()
        {
            this.Configuration = Neblio.API.Client.Configuration.Default;

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InsightApi(Neblio.API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Neblio.API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Neblio.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Neblio.API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Neblio.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns address object Returns NEBL address object containing information on a specific address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>GetAddressResponse</returns>
        public GetAddressResponse GetAddress (string address)
        {
             ApiResponse<GetAddressResponse> localVarResponse = GetAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns address object Returns NEBL address object containing information on a specific address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of GetAddressResponse</returns>
        public ApiResponse< GetAddressResponse > GetAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddress");

            var localVarPath = "/ins/addr/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressResponse)));
        }

        /// <summary>
        /// Returns address object Returns NEBL address object containing information on a specific address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of GetAddressResponse</returns>
        public async System.Threading.Tasks.Task<GetAddressResponse> GetAddressAsync (string address)
        {
             ApiResponse<GetAddressResponse> localVarResponse = await GetAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns address object Returns NEBL address object containing information on a specific address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (GetAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAddressResponse>> GetAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddress");

            var localVarPath = "/ins/addr/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAddressResponse)));
        }

        /// <summary>
        /// Returns address balance in sats Returns NEBL address balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        public decimal? GetAddressBalance (string address)
        {
             ApiResponse<decimal?> localVarResponse = GetAddressBalanceWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns address balance in sats Returns NEBL address balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > GetAddressBalanceWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressBalance");

            var localVarPath = "/ins/addr/{address}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns address balance in sats Returns NEBL address balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> GetAddressBalanceAsync (string address)
        {
             ApiResponse<decimal?> localVarResponse = await GetAddressBalanceAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns address balance in sats Returns NEBL address balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressBalanceAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressBalance");

            var localVarPath = "/ins/addr/{address}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns total received by address in sats Returns total NEBL received by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        public decimal? GetAddressTotalReceived (string address)
        {
             ApiResponse<decimal?> localVarResponse = GetAddressTotalReceivedWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns total received by address in sats Returns total NEBL received by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > GetAddressTotalReceivedWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressTotalReceived");

            var localVarPath = "/ins/addr/{address}/totalReceived";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressTotalReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns total received by address in sats Returns total NEBL received by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> GetAddressTotalReceivedAsync (string address)
        {
             ApiResponse<decimal?> localVarResponse = await GetAddressTotalReceivedAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns total received by address in sats Returns total NEBL received by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressTotalReceivedAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressTotalReceived");

            var localVarPath = "/ins/addr/{address}/totalReceived";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressTotalReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns total sent by address in sats Returns total NEBL sent by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        public decimal? GetAddressTotalSent (string address)
        {
             ApiResponse<decimal?> localVarResponse = GetAddressTotalSentWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns total sent by address in sats Returns total NEBL sent by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > GetAddressTotalSentWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressTotalSent");

            var localVarPath = "/ins/addr/{address}/totalSent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressTotalSent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns total sent by address in sats Returns total NEBL sent by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> GetAddressTotalSentAsync (string address)
        {
             ApiResponse<decimal?> localVarResponse = await GetAddressTotalSentAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns total sent by address in sats Returns total NEBL sent by address in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressTotalSentAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressTotalSent");

            var localVarPath = "/ins/addr/{address}/totalSent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressTotalSent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns address unconfirmed balance in sats Returns NEBL address unconfirmed balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>decimal?</returns>
        public decimal? GetAddressUnconfirmedBalance (string address)
        {
             ApiResponse<decimal?> localVarResponse = GetAddressUnconfirmedBalanceWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns address unconfirmed balance in sats Returns NEBL address unconfirmed balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > GetAddressUnconfirmedBalanceWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressUnconfirmedBalance");

            var localVarPath = "/ins/addr/{address}/unconfirmedBalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressUnconfirmedBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns address unconfirmed balance in sats Returns NEBL address unconfirmed balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> GetAddressUnconfirmedBalanceAsync (string address)
        {
             ApiResponse<decimal?> localVarResponse = await GetAddressUnconfirmedBalanceAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns address unconfirmed balance in sats Returns NEBL address unconfirmed balance in satoshis
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> GetAddressUnconfirmedBalanceAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressUnconfirmedBalance");

            var localVarPath = "/ins/addr/{address}/unconfirmedBalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressUnconfirmedBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
        }

        /// <summary>
        /// Returns all UTXOs at a given address Returns information on each Unspent Transaction Output contained at an address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetAddressUtxos (string address)
        {
             ApiResponse<List<Object>> localVarResponse = GetAddressUtxosWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all UTXOs at a given address Returns information on each Unspent Transaction Output contained at an address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetAddressUtxosWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressUtxos");

            var localVarPath = "/ins/addr/{address}/utxo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressUtxos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Returns all UTXOs at a given address Returns information on each Unspent Transaction Output contained at an address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetAddressUtxosAsync (string address)
        {
             ApiResponse<List<Object>> localVarResponse = await GetAddressUtxosAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all UTXOs at a given address Returns information on each Unspent Transaction Output contained at an address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetAddressUtxosAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling InsightApi->GetAddressUtxos");

            var localVarPath = "/ins/addr/{address}/utxo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressUtxos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Returns information regarding a Neblio block Returns blockchain data for a given block based upon the block hash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>GetBlockResponse</returns>
        public GetBlockResponse GetBlock (string blockhash)
        {
             ApiResponse<GetBlockResponse> localVarResponse = GetBlockWithHttpInfo(blockhash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information regarding a Neblio block Returns blockchain data for a given block based upon the block hash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>ApiResponse of GetBlockResponse</returns>
        public ApiResponse< GetBlockResponse > GetBlockWithHttpInfo (string blockhash)
        {
            // verify the required parameter 'blockhash' is set
            if (blockhash == null)
                throw new ApiException(400, "Missing required parameter 'blockhash' when calling InsightApi->GetBlock");

            var localVarPath = "/ins/block/{blockhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockhash != null) localVarPathParams.Add("blockhash", this.Configuration.ApiClient.ParameterToString(blockhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBlockResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockResponse)));
        }

        /// <summary>
        /// Returns information regarding a Neblio block Returns blockchain data for a given block based upon the block hash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>Task of GetBlockResponse</returns>
        public async System.Threading.Tasks.Task<GetBlockResponse> GetBlockAsync (string blockhash)
        {
             ApiResponse<GetBlockResponse> localVarResponse = await GetBlockAsyncWithHttpInfo(blockhash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns information regarding a Neblio block Returns blockchain data for a given block based upon the block hash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockhash">Block Hash</param>
        /// <returns>Task of ApiResponse (GetBlockResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBlockResponse>> GetBlockAsyncWithHttpInfo (string blockhash)
        {
            // verify the required parameter 'blockhash' is set
            if (blockhash == null)
                throw new ApiException(400, "Missing required parameter 'blockhash' when calling InsightApi->GetBlock");

            var localVarPath = "/ins/block/{blockhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockhash != null) localVarPathParams.Add("blockhash", this.Configuration.ApiClient.ParameterToString(blockhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBlockResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockResponse)));
        }

        /// <summary>
        /// Returns block hash of block Returns the block hash of a block at a given block index
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>GetBlockIndexResponse</returns>
        public GetBlockIndexResponse GetBlockIndex (decimal? blockindex)
        {
             ApiResponse<GetBlockIndexResponse> localVarResponse = GetBlockIndexWithHttpInfo(blockindex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns block hash of block Returns the block hash of a block at a given block index
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>ApiResponse of GetBlockIndexResponse</returns>
        public ApiResponse< GetBlockIndexResponse > GetBlockIndexWithHttpInfo (decimal? blockindex)
        {
            // verify the required parameter 'blockindex' is set
            if (blockindex == null)
                throw new ApiException(400, "Missing required parameter 'blockindex' when calling InsightApi->GetBlockIndex");

            var localVarPath = "/ins/block-index/{blockindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockindex != null) localVarPathParams.Add("blockindex", this.Configuration.ApiClient.ParameterToString(blockindex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBlockIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockIndexResponse)));
        }

        /// <summary>
        /// Returns block hash of block Returns the block hash of a block at a given block index
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>Task of GetBlockIndexResponse</returns>
        public async System.Threading.Tasks.Task<GetBlockIndexResponse> GetBlockIndexAsync (decimal? blockindex)
        {
             ApiResponse<GetBlockIndexResponse> localVarResponse = await GetBlockIndexAsyncWithHttpInfo(blockindex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns block hash of block Returns the block hash of a block at a given block index
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockindex">Block Index</param>
        /// <returns>Task of ApiResponse (GetBlockIndexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBlockIndexResponse>> GetBlockIndexAsyncWithHttpInfo (decimal? blockindex)
        {
            // verify the required parameter 'blockindex' is set
            if (blockindex == null)
                throw new ApiException(400, "Missing required parameter 'blockindex' when calling InsightApi->GetBlockIndex");

            var localVarPath = "/ins/block-index/{blockindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockindex != null) localVarPathParams.Add("blockindex", this.Configuration.ApiClient.ParameterToString(blockindex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetBlockIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockIndexResponse)));
        }

        /// <summary>
        /// Returns raw transaction hex Returns raw transaction hex representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>GetRawTxResponse</returns>
        public GetRawTxResponse GetRawTx (string txid)
        {
             ApiResponse<GetRawTxResponse> localVarResponse = GetRawTxWithHttpInfo(txid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns raw transaction hex Returns raw transaction hex representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>ApiResponse of GetRawTxResponse</returns>
        public ApiResponse< GetRawTxResponse > GetRawTxWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling InsightApi->GetRawTx");

            var localVarPath = "/ins/rawtx/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRawTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRawTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRawTxResponse)));
        }

        /// <summary>
        /// Returns raw transaction hex Returns raw transaction hex representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of GetRawTxResponse</returns>
        public async System.Threading.Tasks.Task<GetRawTxResponse> GetRawTxAsync (string txid)
        {
             ApiResponse<GetRawTxResponse> localVarResponse = await GetRawTxAsyncWithHttpInfo(txid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns raw transaction hex Returns raw transaction hex representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of ApiResponse (GetRawTxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRawTxResponse>> GetRawTxAsyncWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling InsightApi->GetRawTx");

            var localVarPath = "/ins/rawtx/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRawTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetRawTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRawTxResponse)));
        }

        /// <summary>
        /// Utility API for calling several blockchain node functions Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Object</returns>
        public Object GetStatus (string q = null)
        {
             ApiResponse<Object> localVarResponse = GetStatusWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utility API for calling several blockchain node functions Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetStatusWithHttpInfo (string q = null)
        {

            var localVarPath = "/ins/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Utility API for calling several blockchain node functions Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetStatusAsync (string q = null)
        {
             ApiResponse<Object> localVarResponse = await GetStatusAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utility API for calling several blockchain node functions Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusAsyncWithHttpInfo (string q = null)
        {

            var localVarPath = "/ins/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get node sync status Returns information on the node&#39;s sync progress
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSyncResponse</returns>
        public GetSyncResponse GetSync ()
        {
             ApiResponse<GetSyncResponse> localVarResponse = GetSyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get node sync status Returns information on the node&#39;s sync progress
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSyncResponse</returns>
        public ApiResponse< GetSyncResponse > GetSyncWithHttpInfo ()
        {

            var localVarPath = "/ins/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSyncResponse)));
        }

        /// <summary>
        /// Get node sync status Returns information on the node&#39;s sync progress
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSyncResponse</returns>
        public async System.Threading.Tasks.Task<GetSyncResponse> GetSyncAsync ()
        {
             ApiResponse<GetSyncResponse> localVarResponse = await GetSyncAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get node sync status Returns information on the node&#39;s sync progress
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSyncResponse>> GetSyncAsyncWithHttpInfo ()
        {

            var localVarPath = "/ins/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSyncResponse)));
        }

        /// <summary>
        /// Returns transaction object Returns NEBL transaction object representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>GetTxResponse</returns>
        public GetTxResponse GetTx (string txid)
        {
             ApiResponse<GetTxResponse> localVarResponse = GetTxWithHttpInfo(txid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transaction object Returns NEBL transaction object representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>ApiResponse of GetTxResponse</returns>
        public ApiResponse< GetTxResponse > GetTxWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling InsightApi->GetTx");

            var localVarPath = "/ins/tx/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTxResponse)));
        }

        /// <summary>
        /// Returns transaction object Returns NEBL transaction object representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of GetTxResponse</returns>
        public async System.Threading.Tasks.Task<GetTxResponse> GetTxAsync (string txid)
        {
             ApiResponse<GetTxResponse> localVarResponse = await GetTxAsyncWithHttpInfo(txid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns transaction object Returns NEBL transaction object representing a NEBL transaction
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction ID</param>
        /// <returns>Task of ApiResponse (GetTxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTxResponse>> GetTxAsyncWithHttpInfo (string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling InsightApi->GetTx");

            var localVarPath = "/ins/tx/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTxResponse)));
        }

        /// <summary>
        /// Get transactions by block or address Returns all transactions by block or address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>GetTxsResponse</returns>
        public GetTxsResponse GetTxs (string address = null, string block = null, decimal? pageNum = null)
        {
             ApiResponse<GetTxsResponse> localVarResponse = GetTxsWithHttpInfo(address, block, pageNum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions by block or address Returns all transactions by block or address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>ApiResponse of GetTxsResponse</returns>
        public ApiResponse< GetTxsResponse > GetTxsWithHttpInfo (string address = null, string block = null, decimal? pageNum = null)
        {

            var localVarPath = "/ins/txs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (block != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block", block)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTxsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTxsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTxsResponse)));
        }

        /// <summary>
        /// Get transactions by block or address Returns all transactions by block or address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>Task of GetTxsResponse</returns>
        public async System.Threading.Tasks.Task<GetTxsResponse> GetTxsAsync (string address = null, string block = null, decimal? pageNum = null)
        {
             ApiResponse<GetTxsResponse> localVarResponse = await GetTxsAsyncWithHttpInfo(address, block, pageNum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transactions by block or address Returns all transactions by block or address
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address (optional)</param>
        /// <param name="block">Block Hash (optional)</param>
        /// <param name="pageNum">Page number to display (optional)</param>
        /// <returns>Task of ApiResponse (GetTxsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTxsResponse>> GetTxsAsyncWithHttpInfo (string address = null, string block = null, decimal? pageNum = null)
        {

            var localVarPath = "/ins/txs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (block != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "block", block)); // query parameter
            if (pageNum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNum", pageNum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTxsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTxsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTxsResponse)));
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific) Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>BroadcastTxResponse</returns>
        public BroadcastTxResponse SendTx (SendTxRequest sendTxRequest)
        {
             ApiResponse<BroadcastTxResponse> localVarResponse = SendTxWithHttpInfo(sendTxRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific) Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>ApiResponse of BroadcastTxResponse</returns>
        public ApiResponse< BroadcastTxResponse > SendTxWithHttpInfo (SendTxRequest sendTxRequest)
        {
            // verify the required parameter 'sendTxRequest' is set
            if (sendTxRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendTxRequest' when calling InsightApi->SendTx");

            var localVarPath = "/ins/tx/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendTxRequest != null && sendTxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendTxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendTxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastTxResponse)));
        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific) Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of BroadcastTxResponse</returns>
        public async System.Threading.Tasks.Task<BroadcastTxResponse> SendTxAsync (SendTxRequest sendTxRequest)
        {
             ApiResponse<BroadcastTxResponse> localVarResponse = await SendTxAsyncWithHttpInfo(sendTxRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Broadcasts a signed raw transaction to the network (not NTP1 specific) Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
        /// </summary>
        /// <exception cref="Neblio.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTxRequest">Object representing a transaction to broadcast</param>
        /// <returns>Task of ApiResponse (BroadcastTxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BroadcastTxResponse>> SendTxAsyncWithHttpInfo (SendTxRequest sendTxRequest)
        {
            // verify the required parameter 'sendTxRequest' is set
            if (sendTxRequest == null)
                throw new ApiException(400, "Missing required parameter 'sendTxRequest' when calling InsightApi->SendTx");

            var localVarPath = "/ins/tx/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendTxRequest != null && sendTxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendTxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendTxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BroadcastTxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BroadcastTxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BroadcastTxResponse)));
        }

    }
}
