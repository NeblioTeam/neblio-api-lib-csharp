/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neblio.API.Client.OpenAPIDateConverter;

namespace Neblio.API.Model
{
    /// <summary>
    /// GetAddressInfoResponseUtxos
    /// </summary>
    [DataContract]
    public partial class GetAddressInfoResponseUtxos :  IEquatable<GetAddressInfoResponseUtxos>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAddressInfoResponseUtxos" /> class.
        /// </summary>
        /// <param name="scriptPubKey">Object representing the scruptPubKey of the UTXO.</param>
        /// <param name="blocktime">Blocktime of the UTXO.</param>
        /// <param name="index">Index of the UTXO at this address.</param>
        /// <param name="txid">Txid of this UTXO.</param>
        /// <param name="tokens">Array of NTP1 tokens in this UTXO..</param>
        /// <param name="used">Whether the UTXO has been used.</param>
        /// <param name="value">Value of the UTXO in NEBL satoshi.</param>
        /// <param name="blockheight">Blockheight of the UTXO.</param>
        public GetAddressInfoResponseUtxos(Object scriptPubKey = default(Object), decimal? blocktime = default(decimal?), decimal? index = default(decimal?), string txid = default(string), List<GetAddressInfoResponseTokens> tokens = default(List<GetAddressInfoResponseTokens>), bool? used = default(bool?), decimal? value = default(decimal?), decimal? blockheight = default(decimal?))
        {
            this.ScriptPubKey = scriptPubKey;
            this.Blocktime = blocktime;
            this.Index = index;
            this.Txid = txid;
            this.Tokens = tokens;
            this.Used = used;
            this.Value = value;
            this.Blockheight = blockheight;
        }
        
        /// <summary>
        /// Object representing the scruptPubKey of the UTXO
        /// </summary>
        /// <value>Object representing the scruptPubKey of the UTXO</value>
        [DataMember(Name="scriptPubKey", EmitDefaultValue=false)]
        public Object ScriptPubKey { get; set; }

        /// <summary>
        /// Blocktime of the UTXO
        /// </summary>
        /// <value>Blocktime of the UTXO</value>
        [DataMember(Name="blocktime", EmitDefaultValue=false)]
        public decimal? Blocktime { get; set; }

        /// <summary>
        /// Index of the UTXO at this address
        /// </summary>
        /// <value>Index of the UTXO at this address</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public decimal? Index { get; set; }

        /// <summary>
        /// Txid of this UTXO
        /// </summary>
        /// <value>Txid of this UTXO</value>
        [DataMember(Name="txid", EmitDefaultValue=false)]
        public string Txid { get; set; }

        /// <summary>
        /// Array of NTP1 tokens in this UTXO.
        /// </summary>
        /// <value>Array of NTP1 tokens in this UTXO.</value>
        [DataMember(Name="tokens", EmitDefaultValue=false)]
        public List<GetAddressInfoResponseTokens> Tokens { get; set; }

        /// <summary>
        /// Whether the UTXO has been used
        /// </summary>
        /// <value>Whether the UTXO has been used</value>
        [DataMember(Name="used", EmitDefaultValue=false)]
        public bool? Used { get; set; }

        /// <summary>
        /// Value of the UTXO in NEBL satoshi
        /// </summary>
        /// <value>Value of the UTXO in NEBL satoshi</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Blockheight of the UTXO
        /// </summary>
        /// <value>Blockheight of the UTXO</value>
        [DataMember(Name="blockheight", EmitDefaultValue=false)]
        public decimal? Blockheight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAddressInfoResponseUtxos {\n");
            sb.Append("  ScriptPubKey: ").Append(ScriptPubKey).Append("\n");
            sb.Append("  Blocktime: ").Append(Blocktime).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Txid: ").Append(Txid).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Blockheight: ").Append(Blockheight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAddressInfoResponseUtxos);
        }

        /// <summary>
        /// Returns true if GetAddressInfoResponseUtxos instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAddressInfoResponseUtxos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAddressInfoResponseUtxos input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScriptPubKey == input.ScriptPubKey ||
                    (this.ScriptPubKey != null &&
                    this.ScriptPubKey.Equals(input.ScriptPubKey))
                ) && 
                (
                    this.Blocktime == input.Blocktime ||
                    (this.Blocktime != null &&
                    this.Blocktime.Equals(input.Blocktime))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Txid == input.Txid ||
                    (this.Txid != null &&
                    this.Txid.Equals(input.Txid))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.Used == input.Used ||
                    (this.Used != null &&
                    this.Used.Equals(input.Used))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Blockheight == input.Blockheight ||
                    (this.Blockheight != null &&
                    this.Blockheight.Equals(input.Blockheight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScriptPubKey != null)
                    hashCode = hashCode * 59 + this.ScriptPubKey.GetHashCode();
                if (this.Blocktime != null)
                    hashCode = hashCode * 59 + this.Blocktime.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Txid != null)
                    hashCode = hashCode * 59 + this.Txid.GetHashCode();
                if (this.Tokens != null)
                    hashCode = hashCode * 59 + this.Tokens.GetHashCode();
                if (this.Used != null)
                    hashCode = hashCode * 59 + this.Used.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Blockheight != null)
                    hashCode = hashCode * 59 + this.Blockheight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
