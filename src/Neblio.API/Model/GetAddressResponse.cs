/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neblio.API.Client.OpenAPIDateConverter;

namespace Neblio.API.Model
{
    /// <summary>
    /// GetAddressResponse
    /// </summary>
    [DataContract]
    public partial class GetAddressResponse :  IEquatable<GetAddressResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAddressResponse" /> class.
        /// </summary>
        /// <param name="addrStr">Address in string form.</param>
        /// <param name="balance">NEBL balance.</param>
        /// <param name="balanceSat">NEBL balance in satoshis.</param>
        /// <param name="totalReceived">Total NEBL received.</param>
        /// <param name="totalReceivedSat">Total NEBL received in satoshis.</param>
        /// <param name="totalSent">Total NEBL sent.</param>
        /// <param name="totalSentSat">Total NEBL sent satoshis.</param>
        /// <param name="unconfirmedBalance">Unconfirmed NEBL balance.</param>
        /// <param name="unconfirmedBalanceSat">Unconfirmed NEBL balance in satoshis.</param>
        /// <param name="unconfirmedTxAppearances">Number of unconfirmed transactions for this address.</param>
        /// <param name="txAppearances">Number of transactions for this address.</param>
        /// <param name="transactions">Array of transaction ids for this address.</param>
        public GetAddressResponse(string addrStr = default(string), decimal? balance = default(decimal?), decimal? balanceSat = default(decimal?), decimal? totalReceived = default(decimal?), decimal? totalReceivedSat = default(decimal?), decimal? totalSent = default(decimal?), decimal? totalSentSat = default(decimal?), decimal? unconfirmedBalance = default(decimal?), decimal? unconfirmedBalanceSat = default(decimal?), decimal? unconfirmedTxAppearances = default(decimal?), decimal? txAppearances = default(decimal?), List<string> transactions = default(List<string>))
        {
            this.AddrStr = addrStr;
            this.Balance = balance;
            this.BalanceSat = balanceSat;
            this.TotalReceived = totalReceived;
            this.TotalReceivedSat = totalReceivedSat;
            this.TotalSent = totalSent;
            this.TotalSentSat = totalSentSat;
            this.UnconfirmedBalance = unconfirmedBalance;
            this.UnconfirmedBalanceSat = unconfirmedBalanceSat;
            this.UnconfirmedTxAppearances = unconfirmedTxAppearances;
            this.TxAppearances = txAppearances;
            this.Transactions = transactions;
        }
        
        /// <summary>
        /// Address in string form
        /// </summary>
        /// <value>Address in string form</value>
        [DataMember(Name="addrStr", EmitDefaultValue=false)]
        public string AddrStr { get; set; }

        /// <summary>
        /// NEBL balance
        /// </summary>
        /// <value>NEBL balance</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal? Balance { get; set; }

        /// <summary>
        /// NEBL balance in satoshis
        /// </summary>
        /// <value>NEBL balance in satoshis</value>
        [DataMember(Name="balanceSat", EmitDefaultValue=false)]
        public decimal? BalanceSat { get; set; }

        /// <summary>
        /// Total NEBL received
        /// </summary>
        /// <value>Total NEBL received</value>
        [DataMember(Name="totalReceived", EmitDefaultValue=false)]
        public decimal? TotalReceived { get; set; }

        /// <summary>
        /// Total NEBL received in satoshis
        /// </summary>
        /// <value>Total NEBL received in satoshis</value>
        [DataMember(Name="totalReceivedSat", EmitDefaultValue=false)]
        public decimal? TotalReceivedSat { get; set; }

        /// <summary>
        /// Total NEBL sent
        /// </summary>
        /// <value>Total NEBL sent</value>
        [DataMember(Name="totalSent", EmitDefaultValue=false)]
        public decimal? TotalSent { get; set; }

        /// <summary>
        /// Total NEBL sent satoshis
        /// </summary>
        /// <value>Total NEBL sent satoshis</value>
        [DataMember(Name="totalSentSat", EmitDefaultValue=false)]
        public decimal? TotalSentSat { get; set; }

        /// <summary>
        /// Unconfirmed NEBL balance
        /// </summary>
        /// <value>Unconfirmed NEBL balance</value>
        [DataMember(Name="unconfirmedBalance", EmitDefaultValue=false)]
        public decimal? UnconfirmedBalance { get; set; }

        /// <summary>
        /// Unconfirmed NEBL balance in satoshis
        /// </summary>
        /// <value>Unconfirmed NEBL balance in satoshis</value>
        [DataMember(Name="unconfirmedBalanceSat", EmitDefaultValue=false)]
        public decimal? UnconfirmedBalanceSat { get; set; }

        /// <summary>
        /// Number of unconfirmed transactions for this address
        /// </summary>
        /// <value>Number of unconfirmed transactions for this address</value>
        [DataMember(Name="unconfirmedTxAppearances", EmitDefaultValue=false)]
        public decimal? UnconfirmedTxAppearances { get; set; }

        /// <summary>
        /// Number of transactions for this address
        /// </summary>
        /// <value>Number of transactions for this address</value>
        [DataMember(Name="txAppearances", EmitDefaultValue=false)]
        public decimal? TxAppearances { get; set; }

        /// <summary>
        /// Array of transaction ids for this address
        /// </summary>
        /// <value>Array of transaction ids for this address</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<string> Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAddressResponse {\n");
            sb.Append("  AddrStr: ").Append(AddrStr).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceSat: ").Append(BalanceSat).Append("\n");
            sb.Append("  TotalReceived: ").Append(TotalReceived).Append("\n");
            sb.Append("  TotalReceivedSat: ").Append(TotalReceivedSat).Append("\n");
            sb.Append("  TotalSent: ").Append(TotalSent).Append("\n");
            sb.Append("  TotalSentSat: ").Append(TotalSentSat).Append("\n");
            sb.Append("  UnconfirmedBalance: ").Append(UnconfirmedBalance).Append("\n");
            sb.Append("  UnconfirmedBalanceSat: ").Append(UnconfirmedBalanceSat).Append("\n");
            sb.Append("  UnconfirmedTxAppearances: ").Append(UnconfirmedTxAppearances).Append("\n");
            sb.Append("  TxAppearances: ").Append(TxAppearances).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAddressResponse);
        }

        /// <summary>
        /// Returns true if GetAddressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAddressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAddressResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddrStr == input.AddrStr ||
                    (this.AddrStr != null &&
                    this.AddrStr.Equals(input.AddrStr))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.BalanceSat == input.BalanceSat ||
                    (this.BalanceSat != null &&
                    this.BalanceSat.Equals(input.BalanceSat))
                ) && 
                (
                    this.TotalReceived == input.TotalReceived ||
                    (this.TotalReceived != null &&
                    this.TotalReceived.Equals(input.TotalReceived))
                ) && 
                (
                    this.TotalReceivedSat == input.TotalReceivedSat ||
                    (this.TotalReceivedSat != null &&
                    this.TotalReceivedSat.Equals(input.TotalReceivedSat))
                ) && 
                (
                    this.TotalSent == input.TotalSent ||
                    (this.TotalSent != null &&
                    this.TotalSent.Equals(input.TotalSent))
                ) && 
                (
                    this.TotalSentSat == input.TotalSentSat ||
                    (this.TotalSentSat != null &&
                    this.TotalSentSat.Equals(input.TotalSentSat))
                ) && 
                (
                    this.UnconfirmedBalance == input.UnconfirmedBalance ||
                    (this.UnconfirmedBalance != null &&
                    this.UnconfirmedBalance.Equals(input.UnconfirmedBalance))
                ) && 
                (
                    this.UnconfirmedBalanceSat == input.UnconfirmedBalanceSat ||
                    (this.UnconfirmedBalanceSat != null &&
                    this.UnconfirmedBalanceSat.Equals(input.UnconfirmedBalanceSat))
                ) && 
                (
                    this.UnconfirmedTxAppearances == input.UnconfirmedTxAppearances ||
                    (this.UnconfirmedTxAppearances != null &&
                    this.UnconfirmedTxAppearances.Equals(input.UnconfirmedTxAppearances))
                ) && 
                (
                    this.TxAppearances == input.TxAppearances ||
                    (this.TxAppearances != null &&
                    this.TxAppearances.Equals(input.TxAppearances))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddrStr != null)
                    hashCode = hashCode * 59 + this.AddrStr.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.BalanceSat != null)
                    hashCode = hashCode * 59 + this.BalanceSat.GetHashCode();
                if (this.TotalReceived != null)
                    hashCode = hashCode * 59 + this.TotalReceived.GetHashCode();
                if (this.TotalReceivedSat != null)
                    hashCode = hashCode * 59 + this.TotalReceivedSat.GetHashCode();
                if (this.TotalSent != null)
                    hashCode = hashCode * 59 + this.TotalSent.GetHashCode();
                if (this.TotalSentSat != null)
                    hashCode = hashCode * 59 + this.TotalSentSat.GetHashCode();
                if (this.UnconfirmedBalance != null)
                    hashCode = hashCode * 59 + this.UnconfirmedBalance.GetHashCode();
                if (this.UnconfirmedBalanceSat != null)
                    hashCode = hashCode * 59 + this.UnconfirmedBalanceSat.GetHashCode();
                if (this.UnconfirmedTxAppearances != null)
                    hashCode = hashCode * 59 + this.UnconfirmedTxAppearances.GetHashCode();
                if (this.TxAppearances != null)
                    hashCode = hashCode * 59 + this.TxAppearances.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
