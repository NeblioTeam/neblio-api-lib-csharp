/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Neblio.API.Client.OpenAPIDateConverter;

namespace Neblio.API.Model
{
    /// <summary>
    /// IssueTokenRequest
    /// </summary>
    [DataContract]
    public partial class IssueTokenRequest :  IEquatable<IssueTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTokenRequest" /> class.
        /// </summary>
        /// <param name="issueAddress">Address issuing the token (required).</param>
        /// <param name="amount">Number of tokens to issue (required).</param>
        /// <param name="divisibility">Number of decimal places the token should be divisble by (0-7) (required).</param>
        /// <param name="fee">Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL) (required).</param>
        /// <param name="reissuable">whether the token should be reissuable (required).</param>
        /// <param name="flags">flags.</param>
        /// <param name="transfer">transfer (required).</param>
        /// <param name="metadata">metadata.</param>
        public IssueTokenRequest(string issueAddress = default(string), decimal? amount = default(decimal?), decimal? divisibility = default(decimal?), decimal? fee = default(decimal?), bool? reissuable = default(bool?), IssueTokenRequestFlags flags = default(IssueTokenRequestFlags), List<IssueTokenRequestTransfer> transfer = default(List<IssueTokenRequestTransfer>), IssueTokenRequestMetadata metadata = default(IssueTokenRequestMetadata))
        {
            // to ensure "issueAddress" is required (not null)
            if (issueAddress == null)
            {
                throw new InvalidDataException("issueAddress is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.IssueAddress = issueAddress;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "divisibility" is required (not null)
            if (divisibility == null)
            {
                throw new InvalidDataException("divisibility is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.Divisibility = divisibility;
            }
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new InvalidDataException("fee is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.Fee = fee;
            }
            // to ensure "reissuable" is required (not null)
            if (reissuable == null)
            {
                throw new InvalidDataException("reissuable is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.Reissuable = reissuable;
            }
            // to ensure "transfer" is required (not null)
            if (transfer == null)
            {
                throw new InvalidDataException("transfer is a required property for IssueTokenRequest and cannot be null");
            }
            else
            {
                this.Transfer = transfer;
            }
            this.Flags = flags;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Address issuing the token
        /// </summary>
        /// <value>Address issuing the token</value>
        [DataMember(Name="issueAddress", EmitDefaultValue=false)]
        public string IssueAddress { get; set; }

        /// <summary>
        /// Number of tokens to issue
        /// </summary>
        /// <value>Number of tokens to issue</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Number of decimal places the token should be divisble by (0-7)
        /// </summary>
        /// <value>Number of decimal places the token should be divisble by (0-7)</value>
        [DataMember(Name="divisibility", EmitDefaultValue=false)]
        public decimal? Divisibility { get; set; }

        /// <summary>
        /// Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
        /// </summary>
        /// <value>Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public decimal? Fee { get; set; }

        /// <summary>
        /// whether the token should be reissuable
        /// </summary>
        /// <value>whether the token should be reissuable</value>
        [DataMember(Name="reissuable", EmitDefaultValue=false)]
        public bool? Reissuable { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public IssueTokenRequestFlags Flags { get; set; }

        /// <summary>
        /// Gets or Sets Transfer
        /// </summary>
        [DataMember(Name="transfer", EmitDefaultValue=false)]
        public List<IssueTokenRequestTransfer> Transfer { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public IssueTokenRequestMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueTokenRequest {\n");
            sb.Append("  IssueAddress: ").Append(IssueAddress).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Divisibility: ").Append(Divisibility).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Reissuable: ").Append(Reissuable).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueTokenRequest);
        }

        /// <summary>
        /// Returns true if IssueTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IssueAddress == input.IssueAddress ||
                    (this.IssueAddress != null &&
                    this.IssueAddress.Equals(input.IssueAddress))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Divisibility == input.Divisibility ||
                    (this.Divisibility != null &&
                    this.Divisibility.Equals(input.Divisibility))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Reissuable == input.Reissuable ||
                    (this.Reissuable != null &&
                    this.Reissuable.Equals(input.Reissuable))
                ) && 
                (
                    this.Flags == input.Flags ||
                    (this.Flags != null &&
                    this.Flags.Equals(input.Flags))
                ) && 
                (
                    this.Transfer == input.Transfer ||
                    this.Transfer != null &&
                    this.Transfer.SequenceEqual(input.Transfer)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssueAddress != null)
                    hashCode = hashCode * 59 + this.IssueAddress.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Divisibility != null)
                    hashCode = hashCode * 59 + this.Divisibility.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.Reissuable != null)
                    hashCode = hashCode * 59 + this.Reissuable.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Transfer != null)
                    hashCode = hashCode * 59 + this.Transfer.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
