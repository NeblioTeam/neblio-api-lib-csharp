/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Object representing all metadata at token issuance
    /// </summary>
    [DataContract]
    public partial class IssueTokenRequestMetadata :  IEquatable<IssueTokenRequestMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTokenRequestMetadata" /> class.
        /// </summary>
        /// <param name="TokenName">Token Symbol it will be identified by (ex. NIBBL).</param>
        /// <param name="Issuer">Name of token issuer.</param>
        /// <param name="Description">Long name or description of token (ex. Nibble).</param>
        /// <param name="Urls">Urls.</param>
        /// <param name="UserData">UserData.</param>
        /// <param name="Encryptions">Array of encryption instruction objects for encrypting userData.</param>
        /// <param name="Rules">Rules.</param>
        public IssueTokenRequestMetadata(string TokenName = default(string), string Issuer = default(string), string Description = default(string), IssueTokenRequestMetadataUrls Urls = default(IssueTokenRequestMetadataUrls), GetTokenMetadataResponseMetadataOfIssuanceDataUserData UserData = default(GetTokenMetadataResponseMetadataOfIssuanceDataUserData), List<IssueTokenRequestMetadataEncryptions> Encryptions = default(List<IssueTokenRequestMetadataEncryptions>), IssueTokenRequestMetadataRules Rules = default(IssueTokenRequestMetadataRules))
        {
            this.TokenName = TokenName;
            this.Issuer = Issuer;
            this.Description = Description;
            this.Urls = Urls;
            this.UserData = UserData;
            this.Encryptions = Encryptions;
            this.Rules = Rules;
        }
        
        /// <summary>
        /// Token Symbol it will be identified by (ex. NIBBL)
        /// </summary>
        /// <value>Token Symbol it will be identified by (ex. NIBBL)</value>
        [DataMember(Name="tokenName", EmitDefaultValue=false)]
        public string TokenName { get; set; }

        /// <summary>
        /// Name of token issuer
        /// </summary>
        /// <value>Name of token issuer</value>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }

        /// <summary>
        /// Long name or description of token (ex. Nibble)
        /// </summary>
        /// <value>Long name or description of token (ex. Nibble)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public IssueTokenRequestMetadataUrls Urls { get; set; }

        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [DataMember(Name="userData", EmitDefaultValue=false)]
        public GetTokenMetadataResponseMetadataOfIssuanceDataUserData UserData { get; set; }

        /// <summary>
        /// Array of encryption instruction objects for encrypting userData
        /// </summary>
        /// <value>Array of encryption instruction objects for encrypting userData</value>
        [DataMember(Name="encryptions", EmitDefaultValue=false)]
        public List<IssueTokenRequestMetadataEncryptions> Encryptions { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public IssueTokenRequestMetadataRules Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueTokenRequestMetadata {\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  Encryptions: ").Append(Encryptions).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueTokenRequestMetadata);
        }

        /// <summary>
        /// Returns true if IssueTokenRequestMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueTokenRequestMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueTokenRequestMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                ) && 
                (
                    this.UserData == input.UserData ||
                    (this.UserData != null &&
                    this.UserData.Equals(input.UserData))
                ) && 
                (
                    this.Encryptions == input.Encryptions ||
                    this.Encryptions != null &&
                    this.Encryptions.SequenceEqual(input.Encryptions)
                ) && 
                (
                    this.Rules == input.Rules ||
                    (this.Rules != null &&
                    this.Rules.Equals(input.Rules))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.UserData != null)
                    hashCode = hashCode * 59 + this.UserData.GetHashCode();
                if (this.Encryptions != null)
                    hashCode = hashCode * 59 + this.Encryptions.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
