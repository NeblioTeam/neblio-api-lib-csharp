/* 
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetAddressUtxosResponseInner
    /// </summary>
    [DataContract]
    public partial class GetAddressUtxosResponseInner :  IEquatable<GetAddressUtxosResponseInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAddressUtxosResponseInner" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="Txid">Transaction ID.</param>
        /// <param name="Vout">vout.</param>
        /// <param name="Ts">Timestamp.</param>
        /// <param name="ScriptPubKey">scriptPubKey.</param>
        /// <param name="Amount">NEBL amount.</param>
        /// <param name="Confirmations">Number of confirmations.</param>
        public GetAddressUtxosResponseInner(string Address = default(string), string Txid = default(string), decimal? Vout = default(decimal?), decimal? Ts = default(decimal?), string ScriptPubKey = default(string), decimal? Amount = default(decimal?), decimal? Confirmations = default(decimal?))
        {
            this.Address = Address;
            this.Txid = Txid;
            this.Vout = Vout;
            this.Ts = Ts;
            this.ScriptPubKey = ScriptPubKey;
            this.Amount = Amount;
            this.Confirmations = Confirmations;
        }
        
        /// <summary>
        /// Address
        /// </summary>
        /// <value>Address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Transaction ID
        /// </summary>
        /// <value>Transaction ID</value>
        [DataMember(Name="txid", EmitDefaultValue=false)]
        public string Txid { get; set; }

        /// <summary>
        /// vout
        /// </summary>
        /// <value>vout</value>
        [DataMember(Name="vout", EmitDefaultValue=false)]
        public decimal? Vout { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        [DataMember(Name="ts", EmitDefaultValue=false)]
        public decimal? Ts { get; set; }

        /// <summary>
        /// scriptPubKey
        /// </summary>
        /// <value>scriptPubKey</value>
        [DataMember(Name="scriptPubKey", EmitDefaultValue=false)]
        public string ScriptPubKey { get; set; }

        /// <summary>
        /// NEBL amount
        /// </summary>
        /// <value>NEBL amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Number of confirmations
        /// </summary>
        /// <value>Number of confirmations</value>
        [DataMember(Name="confirmations", EmitDefaultValue=false)]
        public decimal? Confirmations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAddressUtxosResponseInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Txid: ").Append(Txid).Append("\n");
            sb.Append("  Vout: ").Append(Vout).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("  ScriptPubKey: ").Append(ScriptPubKey).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Confirmations: ").Append(Confirmations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAddressUtxosResponseInner);
        }

        /// <summary>
        /// Returns true if GetAddressUtxosResponseInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAddressUtxosResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAddressUtxosResponseInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Txid == input.Txid ||
                    (this.Txid != null &&
                    this.Txid.Equals(input.Txid))
                ) && 
                (
                    this.Vout == input.Vout ||
                    (this.Vout != null &&
                    this.Vout.Equals(input.Vout))
                ) && 
                (
                    this.Ts == input.Ts ||
                    (this.Ts != null &&
                    this.Ts.Equals(input.Ts))
                ) && 
                (
                    this.ScriptPubKey == input.ScriptPubKey ||
                    (this.ScriptPubKey != null &&
                    this.ScriptPubKey.Equals(input.ScriptPubKey))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Confirmations == input.Confirmations ||
                    (this.Confirmations != null &&
                    this.Confirmations.Equals(input.Confirmations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Txid != null)
                    hashCode = hashCode * 59 + this.Txid.GetHashCode();
                if (this.Vout != null)
                    hashCode = hashCode * 59 + this.Vout.GetHashCode();
                if (this.Ts != null)
                    hashCode = hashCode * 59 + this.Ts.GetHashCode();
                if (this.ScriptPubKey != null)
                    hashCode = hashCode * 59 + this.ScriptPubKey.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Confirmations != null)
                    hashCode = hashCode * 59 + this.Confirmations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
